{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\coresight2\\\\Documents\\\\Visual Studio Code\\\\react-project\\\\NodeBird_Project\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport { FOLLOW_USER_REQUEST } from '../reducers/user';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    if (liked) {\n      //좋아요 누른 상태.\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      //좋아요 안누른 상태.\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합네다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {};\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && React.createElement(PostImages, {\n      images: post.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }),\n    actions: [React.createElement(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \" \\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717 \\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) ? React.createElement(Button, {\n      onClick: onUnfollow(post.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : React.createElement(Button, {\n      onClick: onFollow(post.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, post.RetweetId && post.Retweet ? React.createElement(Card, {\n    cover: post.Retweet.Images[0] && React.createElement(PostImages, {\n      images: post.Retweet.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Card.Meta, {\n    avatar: React.createElement(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: React.createElement(PostCardContent, {\n      postData: post.Retweet.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })) : React.createElement(Card.Meta, {\n    avatar: React.createElement(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: React.createElement(PostCardContent, {\n      postData: post.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), commentFormOpened && React.createElement(React.Fragment, null, React.createElement(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  })), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), React.createElement(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Comment, {\n        author: item.User.nickname,\n        avatar: React.createElement(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, item.User.nickname[0]))),\n        content: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object,\n    Likers: PropTypes.object\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:\\Users\\coresight2\\Documents\\Visual Studio Code\\react-project\\NodeBird_Project\\front\\components\\PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","PostImages","PostCardContent","FOLLOW_USER_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","createdAt","Images","RetweetId","User","nickname","Followings","onUnfollow","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST,LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\nimport { FOLLOW_USER_REQUEST } from '../reducers/user';\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n\r\n  const onSubmitComment = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]);\r\n\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  const onToggleLike = useCallback(() => {\r\n    if (!me) {\r\n\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n\r\n    if (liked) { //좋아요 누른 상태.\r\n      dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    } else { //좋아요 안누른 상태.\r\n      dispatch({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, [me && me.id, post && post.id, liked]);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!me) {\r\n      return alert('로그인이 필요합네다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id\r\n    });\r\n  }, [me && me.id, post && post.id]);\r\n\r\n  const onFollow = useCallback(userId => () => {\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <Icon type='retweet' key='retweet'  onClick={onRetweet}/>,\r\n          <Icon type='heart' key='heart' theme={liked ? 'twoTone': 'outlined'} twoToneColor='#eb2f96' onClick={onToggleLike} />,\r\n          <Icon type='message' key='message' onClick={onToggleComment} />,\r\n          <Icon type='ellipsis' key='ellipsis' />,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname} 님이 리트윗 하셨습니다.` : null}\r\n        extra={!me || post.User.id === me.id\r\n          ? null\r\n          : me.Followings && me.Followings.find(v => v.id === post.User.id)\r\n            ? <Button onClick={onUnfollow(post.User.id)}>언팔로우</Button>\r\n            : <Button onClick={onFollow(post.User.id)}>팔로우</Button>\r\n        }\r\n      >\r\n        { post.RetweetId && post.Retweet\r\n          ? (\r\n            <Card cover={ post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} /> } >\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link href={{ pathname: '/user', query: { id: post.Retweet.User.id } }} as={`/user/${post.Retweet.User.id}`} >\r\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                title={post.Retweet.User.nickname}\r\n                description={ <PostCardContent postData={post.Retweet.content} /> }\r\n              />\r\n            </Card>\r\n          )\r\n          :\r\n          (\r\n            <Card.Meta\r\n              avatar={(\r\n                <Link\r\n                  href={{ pathname: '/user', query: { id: post.User.id } }}\r\n                  as={`/user/${post.User.id}`}\r\n                >\r\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                </Link>\r\n              )}\r\n              title={post.User.nickname}\r\n              description={ <PostCardContent postData={post.content} />}\r\n            />\r\n          )\r\n        }\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type='primary' htmlType='submit' loading={isAddingComment}>삐약</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout='horizontal'\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(\r\n                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                      <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n    Likers: PropTypes.object,\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}