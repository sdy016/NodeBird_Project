{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unLikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweetPost),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, // 코멘트 Action\nLOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, // Post 불러오기 Action\nADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, // Post 추가 Action\nLOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, // 해시태그 포스트 Action\nLOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, // 타 유저 포스트 로드 Action.\nLOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, // 포스트 코멘트 리스트 로드 Action.\nUPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, // 업로드 이미지 Action\nLIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, // 좋아요 Action\nUNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, // 안좋아요 Action\nRETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post'; // **************************************\n// 포스트 추가 API\n// *************************************\n// 포스트 추가. axios API\n\nfunction addPostAPI(postData) {\n  console.log('postData: ', postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n} // 포스트 추가. generate function\n\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} // 포스트 추가 watch Action\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n/*\r\n*메인 포스트 로드 API\r\n*/\n// 메인 포스트 로드 axios API\n\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n} // 메인 포스트 로드  generate function\n\n\nfunction loadMainPosts() {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          _result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: _result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n/**************************************\r\nCommnet 추가 API\r\n*************************************/\n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var _result2;\n\n  return _regeneratorRuntime.wrap(function addComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          _result2 = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: _result2.data\n            }\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n/**************************************\r\nCommnet 정보 API\r\n*************************************/\n\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var _result3;\n\n  return _regeneratorRuntime.wrap(function loadComments$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          _result3 = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: _result3.data\n            }\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n/**************************************\r\n해시태그 정보 API\r\n*************************************/\n\n\nfunction loadHashtagPostsAPI(tag) {\n  console.log('tag: ', tag);\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var _result4;\n\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          console.log('loadHashtagPosts', action);\n          _context9.prev = 1;\n          _context9.next = 4;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 4:\n          _result4 = _context9.sent;\n          _context9.next = 7;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: _result4.data\n          });\n\n        case 7:\n          _context9.next = 13;\n          break;\n\n        case 9:\n          _context9.prev = 9;\n          _context9.t0 = _context9[\"catch\"](1);\n          _context9.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[1, 9]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          console.log('watchLoadHashtagPosts');\n          _context10.next = 3;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 3:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n/**************************************\r\n유저 포스트 정보 API\r\n*************************************/\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var _result5;\n\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          _result5 = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: _result5.data\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n/**************************************\r\n이미지 업로드 API\r\n*************************************/\n\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var _result6;\n\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          _result6 = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: _result6.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n/**************************************\r\n좋아요 API\r\n*************************************/\n\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var _result7;\n\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          _result7 = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: _result7.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n/**************************************\r\n좋아요 취소 API\r\n*************************************/\n\n\nfunction unLikePostAPI(postId) {\n  return axios.delete(\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unLikePost(action) {\n  var _result8;\n\n  return _regeneratorRuntime.wrap(function unLikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unLikePostAPI, action.data);\n\n        case 3:\n          _result8 = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: _result8.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unLikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n/**************************************\r\n리트윗 API\r\n*************************************/\n\n\nfunction retweetPostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction retweetPost(action) {\n  var _result9;\n\n  return _regeneratorRuntime.wrap(function retweetPost$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetPostAPI, action.data);\n\n        case 3:\n          _result9 = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: _result9.data\n          });\n\n        case 6:\n          _context19.next = 13;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweetPost);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}","map":{"version":3,"sources":["C:\\Users\\coresight2\\Documents\\Visual Studio Code\\react-project\\NodeBird_Project\\front\\sagas\\post.js"],"names":["addPost","watchAddPost","loadMainPosts","watchLoadMainPosts","addComment","watchAddComment","loadComments","watchLoadComments","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","uploadImages","watchUploadImages","likePost","watchLikePost","unLikePost","watchUnlikePost","retweetPost","watchRetweet","postSaga","all","fork","takeLatest","put","delay","call","axios","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPostAPI","postData","console","log","post","withCredentials","action","data","result","type","error","loadMainPostsAPI","get","addCommentAPI","postId","content","comment","loadCommentsAPI","comments","loadHashtagPostsAPI","tag","loadUserPostsAPI","id","uploadImagesAPI","formData","likePostAPI","userId","unLikePostAPI","delete","retweetPostAPI"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, // 코멘트 Action\r\n  LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, // Post 불러오기 Action\r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, // Post 추가 Action\r\n  LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, // 해시태그 포스트 Action\r\n  LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, // 타 유저 포스트 로드 Action.\r\n  LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, // 포스트 코멘트 리스트 로드 Action.\r\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, // 업로드 이미지 Action\r\n  LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, // 좋아요 Action\r\n  UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, // 안좋아요 Action\r\n  RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\r\n} from '../reducers/post';\r\n\r\n// **************************************\r\n// 포스트 추가 API\r\n// *************************************\r\n// 포스트 추가. axios API\r\nfunction addPostAPI(postData) {\r\n  console.log('postData: ', postData);\r\n\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n// 포스트 추가. generate function\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\n// 포스트 추가 watch Action\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n/*\r\n*메인 포스트 로드 API\r\n*/\r\n// 메인 포스트 로드 axios API\r\nfunction loadMainPostsAPI() {\r\n  return axios.get('/posts');\r\n}\r\n\r\n// 메인 포스트 로드  generate function\r\nfunction* loadMainPosts() {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\n/**************************************\r\nCommnet 추가 API\r\n*************************************/\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment:result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n/**************************************\r\nCommnet 정보 API\r\n*************************************/\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments:result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\n\r\n/**************************************\r\n해시태그 정보 API\r\n*************************************/\r\nfunction loadHashtagPostsAPI(tag) {\r\n  console.log('tag: ', tag);\r\n\r\n  return axios.get(`/hashtag/${tag}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  console.log('loadHashtagPosts', action);\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n\r\n  console.log('watchLoadHashtagPosts');\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\n\r\n/**************************************\r\n유저 포스트 정보 API\r\n*************************************/\r\nfunction loadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\n\r\n/**************************************\r\n이미지 업로드 API\r\n*************************************/\r\nfunction uploadImagesAPI(formData) {\r\n  return axios.post('/post/images', formData, { withCredentials: true });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\n\r\n/**************************************\r\n좋아요 API\r\n*************************************/\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, {}, { withCredentials: true });\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\n/**************************************\r\n좋아요 취소 API\r\n*************************************/\r\nfunction unLikePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}/like`, { withCredentials: true });\r\n}\r\n\r\nfunction* unLikePost(action) {\r\n  try {\r\n    const result = yield call(unLikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unLikePost);\r\n}\r\n\r\n/**************************************\r\n리트윗 API\r\n*************************************/\r\nfunction retweetPostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, { withCredentials: true });\r\n}\r\n\r\nfunction* retweetPost(action) {\r\n  try {\r\n    const result = yield call(retweetPostAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweetPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchRetweet),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}