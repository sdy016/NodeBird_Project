{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logIn),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogIn),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logOut),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchlogOut),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\naxios.defaults.baseURL = \"http://localhost:8080/api\"; //로그인\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} //로그인 API\n\n\nfunction logInAPI(loginData) {\n  //서버에 요청\n  return axios.post(\"/user/login\", loginData, {\n    withCredentials: true\n  });\n} //로그인 watch\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //회원가입\n\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n} //회원가입 API\n\n\nfunction signUpAPI(signUpData) {\n  return axios.post(\"/user/\", signUpData);\n} //회원가입 watch\n\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //로그아웃\n\n\nfunction logOut(action) {\n  return _regeneratorRuntime.wrap(function logOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n} //로그아웃 API\n\n\nfunction logOutAPI(signUpData) {\n  return axios.post(\"/user/logout\", signUpData);\n} //로그아웃 watch\n\n\nfunction watchlogOut() {\n  return _regeneratorRuntime.wrap(function watchlogOut$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //여기가 시작점\n//yield 는 중단점이다.\n//take는 중단점 실행을 나타내는 트리거 같은 놈인듯\n//put은 사가의 디스패치 라고 볼수 있다\n//call은 동기요청 fork는 비동기 요청\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchSignUp), fork(watchLogIn), fork(watchLoadUser), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:\\Project\\React_Project\\front\\sagas\\user.js"],"names":["logIn","watchLogIn","signUp","watchSignUp","logOut","watchlogOut","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","defaults","baseURL","action","loginAPI","data","result","type","console","error","logInAPI","loginData","post","withCredentials","login","signUpAPI","signUpData","logOutAPI","watchLoadUser"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n  put,\r\n  take,\r\n  delay\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LOAD_USER_FAILURE,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS\r\n} from \"../reducers/user\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:8080/api\";\r\n\r\n//로그인\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(loginAPI, action.data); //서버 응답\r\n    yield put({\r\n      // put은 dispatch 동일\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\n//로그인 API\r\nfunction logInAPI(loginData) {\r\n  //서버에 요청\r\n  return axios.post(\"/user/login\", loginData, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\n//로그인 watch\r\nfunction* watchLogIn() {\r\n  yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\n//회원가입\r\nfunction* signUp(action) {\r\n  try {\r\n    yield call(signUpAPI, action.data);\r\n    yield put({\r\n      // put은 dispatch 동일\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\n//회원가입 API\r\nfunction signUpAPI(signUpData) {\r\n  return axios.post(\"/user/\", signUpData);\r\n}\r\n\r\n//회원가입 watch\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n//로그아웃\r\nfunction* logOut(action) {\r\n  try {\r\n    yield call(signUpAPI, action.data);\r\n    yield put({\r\n      // put은 dispatch 동일\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    // loginAPI 실패\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\n//로그아웃 API\r\nfunction logOutAPI(signUpData) {\r\n  return axios.post(\"/user/logout\", signUpData);\r\n}\r\n\r\n//로그아웃 watch\r\nfunction* watchlogOut() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n//여기가 시작점\r\n//yield 는 중단점이다.\r\n//take는 중단점 실행을 나타내는 트리거 같은 놈인듯\r\n//put은 사가의 디스패치 라고 볼수 있다\r\n//call은 동기요청 fork는 비동기 요청\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchSignUp),\r\n    fork(watchLogIn),\r\n    fork(watchLoadUser),\r\n    fork(watchSignUp)\r\n  ]);\r\n  // console.log('aaaa');\r\n  // yield helloSaga();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}