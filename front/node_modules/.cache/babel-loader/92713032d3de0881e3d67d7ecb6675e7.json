{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(hello),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchHello),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nvar HELLO_SAGA = 'HELLO_SAGA';\nvar BUY_SAGA = 'BUY_SAGA';\n\nfunction loginAPI() {//서버에 요청\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n          _context2.next = 4;\n          return take(LOG_IN_REQUEST);\n\n        case 4:\n          _context2.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction hello() {\n  return _regeneratorRuntime.wrap(function hello$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return delay(1000);\n\n        case 2:\n          _context3.next = 4;\n          return put({\n            type: 'BYE_SAGA'\n          });\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(HELLO_SAGA, hello);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //여기가 시작점\n//yield 는 중단점이다.\n//take는 중단점 실행을 나타내는 트리거 같은 놈인듯\n//put은 사가의 디스패치 라고 볼수 있다\n//call은 동기요청 fork는 비동기 요청\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchHello), fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:\\Users\\coresight2\\Documents\\Visual Studio Code\\react-project\\NodeBird_Project\\front\\sagas\\user.js"],"names":["login","watchLogin","hello","watchHello","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","BUY_SAGA","loginAPI","type","console","log","LOG_IN"],"mappings":";;;;yBAwBUA,K;;;yBAUAC,U;;;yBAMAC,K;;;yBAKAC,U;;;yBASeC,Q;;AAtDzB,SACEC,GADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,IALF,EAMEC,GANF,EAOEC,IAPF,EAQEC,KARF,QASO,oBATP;AAWA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,kBAJP;AAMA,IAAMC,UAAU,GAAG,YAAnB;AACA,IAAMC,QAAQ,GAAG,UAAjB;;AAEA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,SAAUlB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMS,IAAI,CAACS,QAAD,CAAV;;AAFJ;AAAA;AAGI,iBAAMR,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEL;AAAR,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKIM,UAAAA,OAAO,CAACC,GAAR;AALJ;AAMI,iBAAMX,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEJ;AAAR,WAAD,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACe,MAAD,EAAStB,KAAT,CAAhB;;AADF;AAAA;AAEE,iBAAMW,IAAI,CAACE,cAAD,CAAV;;AAFF;AAAA;AAGE,iBAAMH,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEL;AAAR,WAAD,CAAT;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUZ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMU,KAAK,CAAC,IAAD,CAAX;;AADF;AAAA;AAEE,iBAAMF,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUhB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,SAAS,CAACQ,UAAD,EAAad,KAAb,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,UAAD,CAAL,EAAmBG,IAAI,CAACL,UAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n  put,\r\n  take,\r\n  delay,\r\n} from 'redux-saga/effects';\r\n\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n} from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA';\r\nconst BUY_SAGA = 'BUY_SAGA';\r\n\r\nfunction loginAPI() {\r\n  //서버에 요청\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    yield call(loginAPI); //동기호출\r\n    yield put({ type: LOG_IN_SUCCESS });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({ type: LOG_IN_FAILURE });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN, login); //로그인이라는 액션이 들어오기를 기다림.\r\n  yield take(LOG_IN_REQUEST);\r\n  yield put({ type: LOG_IN_SUCCESS });\r\n}\r\n\r\nfunction* hello() {\r\n  yield delay(1000);\r\n  yield put({ type: 'BYE_SAGA' });\r\n}\r\n\r\nfunction* watchHello() {\r\n  yield takeEvery(HELLO_SAGA, hello);\r\n}\r\n\r\n//여기가 시작점\r\n//yield 는 중단점이다.\r\n//take는 중단점 실행을 나타내는 트리거 같은 놈인듯\r\n//put은 사가의 디스패치 라고 볼수 있다\r\n//call은 동기요청 fork는 비동기 요청\r\nexport default function* userSaga() {\r\n  yield all([fork(watchHello), fork(watchLogin)]);\r\n  // console.log('aaaa');\r\n  // yield helloSaga();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}