{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, // 코멘트 Action\nLOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, // Post 불러오기 Action\nADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, // Post 추가 Action\nLOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, // 해시태그 포스트 Action\nLOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST } from //타 유저 포스트 로드.\n'../reducers/post'; // 포스트 추가. axios API\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n} // 포스트 추가. generate function\n\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} // 포스트 추가 watch Action\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // 메인 포스트 로드 axios API\n\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n} // 메인 포스트 로드  generate function\n\n\nfunction loadMainPosts() {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          _result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: _result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction addCommentAPI(data) {\n  console.log('data: ', data);\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.comment\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var _result2;\n\n  return _regeneratorRuntime.wrap(function addComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          _result2 = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: _result2.data\n            }\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var _result3;\n\n  return _regeneratorRuntime.wrap(function loadComments$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          _result3 = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: _result3.data\n            }\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var _result4;\n\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          _result4 = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: _result4.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var _result5;\n\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          _result5 = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: _result5.data\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["C:\\Project\\React_Project\\front\\sagas\\post.js"],"names":["addPost","watchAddPost","loadMainPosts","watchLoadMainPosts","addComment","watchAddComment","loadComments","watchLoadComments","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","postSaga","all","fork","takeLatest","put","delay","call","axios","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","addPostAPI","postData","post","withCredentials","action","data","result","type","error","loadMainPostsAPI","get","addCommentAPI","console","log","postId","content","comment","loadCommentsAPI","loadHashtagPostsAPI","tag","loadUserPostsAPI","id"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, // 코멘트 Action\r\n  LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, // Post 불러오기 Action\r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, // Post 추가 Action\r\n  LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, // 해시태그 포스트 Action\r\n  LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST,  //타 유저 포스트 로드.\r\n} from '../reducers/post';\r\n\r\n// 포스트 추가. axios API\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n// 포스트 추가. generate function\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\n// 포스트 추가 watch Action\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n// 메인 포스트 로드 axios API\r\nfunction loadMainPostsAPI() {\r\n  return axios.get('/posts');\r\n}\r\n\r\n// 메인 포스트 로드  generate function\r\nfunction* loadMainPosts() {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  console.log('data: ', data);\r\n  return axios.post(`/post/${data.postId}/comment`, {content:data.comment}, {withCredentials:true});\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment:result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment:result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\n\r\n\r\nfunction loadHashtagPostsAPI(tag) {\r\n  return axios.get(`/hashtag/${tag}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}