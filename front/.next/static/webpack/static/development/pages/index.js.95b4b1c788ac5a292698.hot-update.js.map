{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.95b4b1c788ac5a292698.hot-update.js","sources":["webpack:///./components/PostCard.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from \"antd\";\r\nimport Link from \"next/link\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!me) {\r\n        return alert(\"로그인이 필요합니다.\");\r\n      }\r\n      return dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: {\r\n          postId: post.id\r\n        }\r\n      });\r\n    },\r\n    [me && me.id]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setCommentText(\"\");\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback(e => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.img && <img alt=\"example\" src={post.img} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" />,\r\n          <Icon type=\"heart\" key=\"heart\" />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={\r\n            <Link\r\n              href={{ pathname: \"/user\", query: { id: post.User.id } }}\r\n              as={`/user/${post.User.id}`}\r\n            >\r\n              <a>\r\n                <Avatar>{post.User.nickname[0]}</Avatar>\r\n              </a>\r\n            </Link>\r\n          }\r\n          title={post.User.nickname}\r\n          description={\r\n            <div>\r\n              {post.content.split(/(#[^\\s]+)/g).map(v => {\r\n                if (v.match(/#[^\\s]+/)) {\r\n                  return (\r\n                    <Link\r\n                      href={{\r\n                        pathname: \"/hashtag\",\r\n                        query: { tag: v.slice(1) }\r\n                      }}\r\n                      as={`/hashtag/${v.slice(1)}`}\r\n                      key={v}\r\n                    >\r\n                      <a>{v}</a>\r\n                    </Link>\r\n                  );\r\n                }\r\n                return v;\r\n              })}\r\n            </div>\r\n          }\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea\r\n                rows={4}\r\n                value={commentText}\r\n                onChange={onChangeCommentText}\r\n              />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n              삐약\r\n            </Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link\r\n                      href={{ pathname: \"/user\", query: { id: item.User.id } }}\r\n                      as={`/user/${item.User.id}`}\r\n                    >\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object\r\n  })\r\n};\r\n\r\nexport default PostCard;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AADA;AAIA;AAAA;AAJA;AAAA;AACA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AATA;AAYA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AANA;AAWA;AACA;AAAA;AACA;AA9BA;AAqCA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AAZA;AAFA;AAJA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;;;;A","sourceRoot":""}